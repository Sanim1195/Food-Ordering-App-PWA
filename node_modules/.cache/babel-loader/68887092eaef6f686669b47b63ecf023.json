{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactApp\\\\FoodOrder\\\\src\\\\components\\\\Layout\\\\Resturant.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport classes from './Resturant.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Resturant = () => {\n  _s();\n\n  const [orders, setOrders] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [httpError, setHttpError] = useState(); // get orders from firebase and display them\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      // getting response from database\n      const response = await fetch('https://himeals-default-rtdb.firebaseio.com/orders.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const responseData = await response.json();\n      const loadedMeals = []; //  looping through the data and storing it in loadedMeals array\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          isCompleted: responseData[key].isCompleted,\n          order: responseData[key].orderedItems,\n          name: responseData[key].user,\n          price: responseData[key].price\n        });\n      } // console.log(loadedMeals);\n\n\n      setOrders(loadedMeals); // console log orders\n\n      setIsLoading(false); // console.log(orders);\n    };\n\n    fetchOrders().catch(error => {\n      setIsLoading(false);\n      setHttpError(error.message);\n    });\n  }, []); // Message to display when loading\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  } // Message to display when error\n\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n  console.log(orders); // filter the orders that are not completed and store them in a new array\n\n  const filteredOrders = orders.filter(order => {\n    return order.isCompleted === false;\n  });\n  console.log(\"filtered orders\");\n  console.log(filteredOrders); // delete the order from the list when the done button is clicked and set the order to completed in the database\n\n  const deleteOrder = id => {\n    console.log(id); // filtering the orders that are not completed\n\n    const updatedOrders = orders.filter(order => {\n      return order.id !== id;\n    });\n    setOrders(updatedOrders);\n    console.log(updatedOrders);\n    fetch(`https://himeals-default-rtdb.firebaseio.com/orders/${id.id}.json`, {\n      method: 'PATCH',\n      body: JSON.stringify({\n        isCompleted: false\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // if response is okay splice the order from the list\n      if (response.ok) {\n        console.log(\"response is okay\");\n        console.log(id);\n        const idx = orders.indexOf(id);\n        console.log(idx); // orders.splice(idx, 1);\n\n        console.log(\"order completed\");\n      }\n    }); // remove the order from the list\n\n    setOrders(prevOrders => {\n      return prevOrders.filter(order => {\n        return order.id !== id;\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      className: classes.navbar,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.header,\n        children: \"Orders:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: filteredOrders.map(order => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.card,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.cardItems,\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [order.name.name, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }, this), order.order.map(item => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                  children: [item.name, \" x \", item.amount]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 27\n                }, this)\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 25\n              }, this);\n            })]\n          }, order.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: classes.flagButton,\n              onClick: () => deleteOrder(order),\n              children: \"Done!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 20\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Resturant, \"5pHtWI5Q316qRtaOYDxHcKj7Fzc=\");\n\n_c = Resturant;\nexport default Resturant;\n\nvar _c;\n\n$RefreshReg$(_c, \"Resturant\");","map":{"version":3,"names":["useState","useEffect","classes","Resturant","orders","setOrders","isLoading","setIsLoading","httpError","setHttpError","fetchOrders","response","fetch","ok","Error","responseData","json","loadedMeals","key","push","id","isCompleted","order","orderedItems","name","user","price","catch","error","message","console","log","filteredOrders","filter","deleteOrder","updatedOrders","method","body","JSON","stringify","headers","then","idx","indexOf","prevOrders","navbar","header","map","card","cardItems","item","amount","flagButton"],"sources":["C:/reactApp/FoodOrder/src/components/Layout/Resturant.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport classes from './Resturant.module.css';\r\n\r\nconst Resturant = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [httpError, setHttpError] = useState();\r\n\r\n  // get orders from firebase and display them\r\n  useEffect(() => {\r\n\r\n    const fetchOrders = async () => {\r\n      // getting response from database\r\n      const response = await fetch(\r\n        'https://himeals-default-rtdb.firebaseio.com/orders.json'\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error('Something went wrong!');\r\n      }\r\n\r\n      const responseData = await response.json();\r\n\r\n      const loadedMeals = [];\r\n      //  looping through the data and storing it in loadedMeals array\r\n      for (const key in responseData) {\r\n        loadedMeals.push({\r\n          id: key,\r\n          isCompleted: responseData[key].isCompleted,\r\n          order: responseData[key].orderedItems,\r\n          name: responseData[key].user,\r\n          price: responseData[key].price,\r\n        });\r\n      }\r\n      // console.log(loadedMeals);\r\n      setOrders(loadedMeals);\r\n      // console log orders\r\n      setIsLoading(false);\r\n      // console.log(orders);\r\n\r\n    };\r\n    fetchOrders().catch((error) => {\r\n      setIsLoading(false);\r\n      setHttpError(error.message);\r\n    });\r\n  }, []);\r\n  // Message to display when loading\r\n  if (isLoading) {\r\n    return (\r\n      <section >\r\n        <p>Loading...</p>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  // Message to display when error\r\n  if (httpError) {\r\n    return (\r\n      <section>\r\n        <p>{httpError}</p>\r\n      </section>\r\n    );\r\n  }\r\n  console.log(orders);\r\n  // filter the orders that are not completed and store them in a new array\r\n  const filteredOrders = orders.filter((order) => {\r\n    return order.isCompleted === false;\r\n  });\r\n  console.log(\"filtered orders\");\r\n  console.log(filteredOrders);\r\n\r\n// delete the order from the list when the done button is clicked and set the order to completed in the database\r\n  const deleteOrder = (id) => {\r\n    \r\n    console.log(id);\r\n    // filtering the orders that are not completed\r\n    const updatedOrders = orders.filter((order) => {\r\n      return order.id !== id;\r\n    });\r\n    setOrders(updatedOrders);\r\n    console.log(updatedOrders);\r\n    fetch(`https://himeals-default-rtdb.firebaseio.com/orders/${id.id}.json`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({\r\n        isCompleted: false,\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).then((response) => {\r\n      // if response is okay splice the order from the list\r\n      if (response.ok) {\r\n        console.log(\"response is okay\");\r\n        console.log(id);\r\n        const idx = orders.indexOf(id);\r\n        console.log(idx);\r\n        // orders.splice(idx, 1);\r\n        \r\n        console.log(\"order completed\");\r\n      }\r\n\r\n    });\r\n\r\n    // remove the order from the list\r\n    setOrders((prevOrders) => {\r\n      return prevOrders.filter((order) => {\r\n        return order.id !== id;\r\n      });\r\n    });\r\n\r\n  };\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <nav className={classes.navbar}>\r\n        <span className={classes.header}>\r\n          Orders:\r\n        </span>\r\n      </nav>\r\n      <div >\r\n        {\r\n          filteredOrders.map((order) => {\r\n            return (\r\n              <div className={classes.card}>\r\n                <div className={classes.cardItems} key={order.id}>\r\n                  <h1>{order.name.name} </h1>\r\n                  {/* map array of orders here */}\r\n                  {\r\n                    order.order.map((item) => {\r\n                      return (\r\n                        <div key={item.id}>\r\n                          <h1>{item.name} x {item.amount}</h1>\r\n                        </div>\r\n                      );\r\n                    })\r\n                  }\r\n                </div>\r\n                <div>\r\n                   <button className={classes.flagButton} onClick={() => deleteOrder(order)} >\r\n                     Done!\r\n                 </button>\r\n               </div>\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n  \r\n\r\n\r\n\r\nexport default Resturant;"],"mappings":"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"},"metadata":{},"sourceType":"module"}